Paste to v0: //done

Task: Initialize the React app in /web. 

Add wagmi + viem; chain config for Hardhat & Sepolia; connectors for MetaMask.

Central config file to load deployments/<network>.json.

App shell with routes: / (home), /admin, /vote, /results.

Global UI: connect button, network status, toasts, error boundary.

Success criteria
App runs with connect button; network switching guidance; routes render.

summary.md — append
Screens scaffolded; next: admin flows.

7) Admin Flows

Paste to v0:

Task: Implement /admin.

Panels:

Election Settings — set times (start/end), set reward, set token (if needed), set Merkle root (paste root).

Candidates — add candidate (name + 3 topic scores 0–100).

Voters — upload voters.csv → call our /tools CLI from docs (manual step) → paste root into UI → write to chain.

All actions gated to owner; show readable errors; show events confirmations.

Provide a manual checklist to verify admin actions.

Success criteria
Owner-only calls succeed; UI validated; errors shown for non-owner.

summary.md — append
Completed admin features; pending voter & quiz flows.

8) Voter Flow — Direct Vote

Paste to v0:

Task: Implement /vote direct path.

UI: select candidate; paste (or auto-fetch) Merkle proof (we’ll support both dev modes: local file or lookup by address from merkle.json dropped into /web/public).

Call voteDirect(candidateId, proof); on success, show a receipt and the newly minted BAL balance (read ERC-20).

Handle “already voted”, “window closed”, and “not whitelisted”.

Success criteria
A whitelisted address can vote once and sees BAL increase.

summary.md — append
Direct vote happy path OK; error states verified; next: quiz.

9) Voter Flow — Questionnaire (Anonymous Selection)

Paste to v0:

Task: Implement /vote quiz path.

UI: 3 sliders (0–100) labeled with the topic names; explain that casting is anonymous and computed on-chain.

Call voteByQuiz([a,b,c], proof); do not reveal chosen candidate in UI. Show only “Your vote has been cast.”

Keep parity with direct path for errors & rewards.

Success criteria
Quiz path works end-to-end; BAL reward issued; anonymity preserved at UI level.

summary.md — append
Quiz flow done; notes on anonymity limits (on-chain event still includes candidate ID).

10) Results & Ranking

Paste to v0:

Task: Implement /results.

Read all candidates & votes; sort in UI; highlight the winner; show totals and percentages.

If endTs passed, show “Finalized” badge (call finalizeIfEnded() once for demo).

Add copy-to-clipboard of summary stats.

Success criteria
Accurate, sorted results; winner clearly shown.

summary.md — append
Results page done; next: tests & polish.

11) Frontend Tests & UX Polish

Paste to v0:

Task: Add basic React tests (key hooks/components). Improve UX.

Tests for candidate list, voting buttons disabled outside window, error banners on failures.

UX: toasts on tx pending/success/failure; network guard; input validation; loading states.

Add lightweight logging (dev-only) and a “Debug” panel with last tx hash.

Success criteria
Frontend tests pass; UX feels robust; errors are actionable.

summary.md — append
Tests list; open UI todos; next: security pass.

15) Optional Bonus Feature(s) — (frontend variants)

Paste to v0 (optional):

Task (optional): Add one original feature for bonus points. Choose one and implement cleanly:

Simple admin-set topic labels & weights for questionnaire

CSV export button in /results for per-candidate stats

Provide quick tests or a demo path.

Success criteria
One bonus feature delivered without breaking core flows.

summary.md — append
Feature summary; tests/demos added.

16) Wrap-Up (Frontend README block)

Paste to v0:

Task: Produce the frontend sections for the final README.md.

Include: prerequisites, env setup (RPC, chain ID), run scripts, admin workflow, voter workflow (direct & quiz), expected outputs/screens, common errors (wrong chain, missing proofs, not owner).

Success criteria
FE docs ready to merge into the final README.

summary.md — append
FE docs staged.